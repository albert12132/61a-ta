from utils.utils import *
import sys
import re

title_tag = re.compile('~ (.*) ~')
header_tag = re.compile('<h(\d) id="(.*)">(.*)</h\d>')

title = []
table = []

def insert_into_table(table, level, html_id, name, base_level=2):
    """Inserts a header name and its HTML id into TABLE.

    PARAMTERS:
    table      -- the table to modify (e.g. table of contents)
    level      -- the HTML header level (1 to 6)
    html_id    -- the header's id tag
    name       -- the contents of the header
    base_level -- what level should be the outer-most bullet point
                  level

    >>> table = []
    >>> insert_into_table(table, 2, 'test', 'Test')
    >>> table
    [('Test', 'test')]
    >>> insert_into_table(table, 2, 'foo', 'Foo')
    >>> table
    [('Test', 'test'), ('Foo', 'foo')]
    >>> insert_into_table(table, 3, 'bar', 'Bar')
    >>> table
    [('Test', 'test'), ('Foo', 'foo'), [('Bar', 'bar')]]
    >>> insert_into_table(table, 2, 'bop', 'Bop')
    >>> table
    [('Test', 'test'), ('Foo', 'foo'), [('Bar', 'bar')], ('Bop', 'bop')]
    """
    slot = table
    while level > base_level:
        if not slot or type(slot[-1]) != list:
            slot.append([])
        slot = slot[-1]
        level -= 1
    slot.append((name, html_id))

def table_to_html(table):
    """Converts a table generated by insert_into_table into an HTML
    unordered list. Recursively deals with nested lists."""
    contents = '<ul>'
    for elem in table:
        if type(elem) == tuple:
            assert len(elem) == 2, 'Invalid entry {}'.format(elem)
            name, html_id = elem
            contents += li(a(html_id, name))
        elif type(elem) == list:
            contents += table_to_html(elem)
    contents += '</ul>'
    return contents

def read():
    """Reads from file handle F an HTML document. The document is
    expected to be the result of converting from markdown, and so needs
    to be processed to fit the notes.html template."""
    lines = []
    for line in sys.stdin:
        check_title = title_tag.search(line)
        if check_title:
            title.append(check_title.group(1))
            continue
        check_header = header_tag.match(line)
        if check_header:
            level, html_id, name = check_header.group(1, 2, 3)
            level = int(level)
            insert_into_table(table, level, html_id, name)


        if '<li><p>' in line:
            line = line.replace('<li><p>', '<li>')
        if '</p></li>' in line:
            line = line.replace('</p></li>', '</li>')
        if '<pre><code>' in line:
            line = line.replace('<pre><code>', '<pre class="prettyprint">')
        if '</code></pre>' in line:
            line = line.replace('</code></pre>', '</pre>')
        lines.append(line)
    return lines

if __name__ == '__main__':
    print('<% extends base.html %>')

    lines = read()
    if title:
        print("""
<% title %>
{}
<%/ title %>""".format(title[0]))
    print('<% body %>')
    if title:
        print("""
<div id='header'>
  <div id ='logo'>
    <h1>{}</h1>
  </div>
</div>""".format(title[0]))
    print(table_to_html(table))
    print(''.join(lines))
    print('<%/ body %>')

